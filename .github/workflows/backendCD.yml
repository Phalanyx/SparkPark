name: Backend CD

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin


      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: build and publish backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/c01:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/c01:latest


  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      
      - name: Pull image from docker hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/c01:latest
      
      - name: remove old
        run: docker rm -f c01 || true
      - name: Create env
        run: |
          echo "PORT=${{ vars.PORT }}" >> .env
          echo "MONGO_DB_STRING=${{ vars.MONGO_DB_STRING }}" >> .env
          echo "GEOCODE_URL=${{ vars.GEOCODE_URL }}" >> .env
          echo "OPEN_ROUTE_KEY=${{ secrets.OPEN_ROUTE_KEY }}" >> .env
          echo "ISOCHRONE_URL=${{ vars.ISOCHRONE_URL }}" >> .env
          echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> .env
          echo "CLOUDFLARE_ACCESS_KEY=${{ secrets.CLOUDFLARE_ACCESS_KEY }}" >> .env
          echo "CLOUDFLARE_SECRET_KEY=${{ secrets.CLOUDFLARE_SECRET_KEY }}" >> .env
          echo "CLOUDFLARE_BUCKET_NAME=${{ vars.CLOUDFLARE_BUCKET_NAME }}" >> .env
          echo "FIREBASE_ID=${{ secrets.FIREBASE_ID }}" >> .env
          echo "FIREBASE_KEY=${{ secrets.FIREBASE_KEY }}" >> .env

      - name: Run container
        run: |
          # Start the container
          docker run -d --env-file .env -p${{ vars.PORT }}:${{ vars.PORT }} --name c01 ${{ secrets.DOCKER_USERNAME }}/c01:latest
          


  test:
    needs: deploy
    runs-on: self-hosted
    steps:
      - name: Run tests
        run: |
          docker exec c01 npm install -g newman
          docker exec c01 newman run tests/postman/backend.postman_collection.json --env-var "base_url=http://localhost:${{ vars.PORT }}"

  cleanup:
    needs: test
    runs-on: self-hosted
    if: failure()
    steps:
      - name: Stop and remove container
        run: |
          docker stop c01 || true
          docker rm c01 || true

      





